import tensorflow as tf 
from tensorflow import keras
from tensorflow.keras.datasets import mnist
from matplotlib import pyplot as plt
import numpy as np
from tensorflow.keras import models, layers




#MNIST dataset parameters.
num_classes = 10 # total classes (0-9 digits).
num_features = 784 # data features (img shape: 28*28).




 # Prepare MNIST data.
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Convert to float32.
x_train, x_test = np.array(x_train, np.float32), np.array(x_test, np.float32)
# Flatten images to 1-D vector of 784 features (28*28).
x_train, x_test = x_train.reshape([-1, num_features]), x_test.reshape([-1, num_features])
# Normalize images value from [0, 255] to [0, 1].
x_train, x_test = x_train / 255., x_test / 255.




model = keras.Sequential([
layers.Flatten(input_shape=(num_features, )),
layers.Dense(128, activation='relu'),
layers.Dense(num_classes)
])

model.compile(optimizer='SGD',loss =keras.losses.SparseCategoricalCrossentropy(from_logits = True), metrics=['accuracy'])

model.summary()

history = model.fit(x_train, y_train, validation_data = (x_test, y_test), batch_size=batch_size, epochs=50)


plt.figure(1)
plt.plot(history.history['accuracy'], label = 'train')
plt.plot(history.history['val_accuracy'], label = 'test')
plt.legend()
plt.title('Performance on training and validation sets')
plt.show()
